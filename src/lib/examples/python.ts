import { CodeExample } from '@/types/typing';

// Example 1: Basic Function
export const basicFunction: CodeExample = {
  id: 'python-basic-function',
  title: '기본 함수',
  language: 'python',
  difficulty: 'beginner',
  description: 'Python의 기본적인 함수 선언과 문자열 반환 예제.',
  tags: ['function', 'string'],
  estimatedTime: 30,
  code: [
    { text: 'def', type: 'keyword' },
    { text: ' ', type: 'plain' },
    { text: 'greet', type: 'function' },
    { text: '(', type: 'operator' },
    { text: 'name', type: 'variable' },
    { text: ':', type: 'operator' },
    { text: ' ', type: 'plain' },
    { text: 'str', type: 'type' },
    { text: ') -> ', type: 'operator' },
    { text: 'str', type: 'type' },
    { text: ':\n    ', type: 'plain' },
    { text: 'return', type: 'keyword' },
    { text: ' ', type: 'plain' },
    { text: 'f"Hello, {', type: 'string' },
    { text: 'name', type: 'variable' },
    { text: '}"', type: 'string' },
  ]
};

// Example 2: Class Definition
export const classExample: CodeExample = {
  id: 'python-class-definition',
  title: '클래스 정의',
  language: 'python',
  difficulty: 'intermediate',
  description: 'Python의 기본 클래스 선언과 메서드 구현 예제.',
  tags: ['class', 'constructor'],
  estimatedTime: 60,
  code: [
    { text: 'class', type: 'keyword' },
    { text: ' ', type: 'plain' },
    { text: 'User', type: 'type' },
    { text: ':\n    ', type: 'plain' },
    { text: 'def', type: 'keyword' },
    { text: ' ', type: 'plain' },
    { text: '__init__', type: 'function' },
    { text: '(', type: 'operator' },
    { text: 'self', type: 'keyword' },
    { text: ', ', type: 'plain' },
    { text: 'name', type: 'variable' },
    { text: ':', type: 'operator' },
    { text: ' ', type: 'plain' },
    { text: 'str', type: 'type' },
    { text: ') -> ', type: 'operator' },
    { text: 'None', type: 'type' },
    { text: ':\n        ', type: 'plain' },
    { text: 'self', type: 'keyword' },
    { text: '.', type: 'operator' },
    { text: '_name', type: 'property' },
    { text: ' = ', type: 'operator' },
    { text: 'name', type: 'variable' },
    { text: '\n\n    ', type: 'plain' },
    { text: 'def', type: 'keyword' },
    { text: ' ', type: 'plain' },
    { text: 'get_name', type: 'function' },
    { text: '(', type: 'operator' },
    { text: 'self', type: 'keyword' },
    { text: ')', type: 'operator' },
    { text: ' -> ', type: 'operator' },
    { text: 'str', type: 'type' },
    { text: ':\n        ', type: 'plain' },
    { text: 'return', type: 'keyword' },
    { text: ' ', type: 'plain' },
    { text: 'self', type: 'keyword' },
    { text: '.', type: 'operator' },
    { text: '_name', type: 'property' },
  ]
};

// Example 3: List Comprehension
export const listComprehensionExample: CodeExample = {
  id: 'python-list-comprehension',
  title: '리스트 컴프리헨션',
  language: 'python',
  difficulty: 'beginner',
  description: 'Python의 리스트 컴프리헨션을 사용한 리스트 생성 예제.',
  tags: ['list', 'comprehension'],
  estimatedTime: 45,
  code: [
    { text: 'numbers', type: 'variable' },
    { text: ' = ', type: 'operator' },
    { text: '[', type: 'operator' },
    { text: '1', type: 'number' },
    { text: ', ', type: 'plain' },
    { text: '2', type: 'number' },
    { text: ', ', type: 'plain' },
    { text: '3', type: 'number' },
    { text: ', ', type: 'plain' },
    { text: '4', type: 'number' },
    { text: ', ', type: 'plain' },
    { text: '5', type: 'number' },
    { text: ']\n\n', type: 'operator' },
    { text: 'doubled', type: 'variable' },
    { text: ' = ', type: 'operator' },
    { text: '[', type: 'operator' },
    { text: 'num', type: 'variable' },
    { text: ' * ', type: 'operator' },
    { text: '2', type: 'number' },
    { text: ' ', type: 'plain' },
    { text: 'for', type: 'keyword' },
    { text: ' ', type: 'plain' },
    { text: 'num', type: 'variable' },
    { text: ' ', type: 'plain' },
    { text: 'in', type: 'keyword' },
    { text: ' ', type: 'plain' },
    { text: 'numbers', type: 'variable' },
    { text: ']', type: 'operator' },
  ]
};

// Example 4: Async/Await
export const asyncExample: CodeExample = {
  id: 'python-async-await',
  title: '비동기 함수',
  language: 'python',
  difficulty: 'intermediate',
  description: 'Python의 async/await를 사용한 비동기 처리 코드 예제.',
  tags: ['async', 'await', 'try-except'],
  estimatedTime: 90,
  code: [
    { text: 'import', type: 'keyword' },
    { text: ' aiohttp\n\n', type: 'plain' },
    { text: 'async', type: 'keyword' },
    { text: ' ', type: 'plain' },
    { text: 'def', type: 'keyword' },
    { text: ' ', type: 'plain' },
    { text: 'fetch_user', type: 'function' },
    { text: '(', type: 'operator' },
    { text: 'user_id', type: 'variable' },
    { text: ':', type: 'operator' },
    { text: ' ', type: 'plain' },
    { text: 'int', type: 'type' },
    { text: ')', type: 'operator' },
    { text: ' -> ', type: 'operator' },
    { text: 'dict', type: 'type' },
    { text: ':\n    ', type: 'plain' },
    { text: 'try', type: 'keyword' },
    { text: ':\n        ', type: 'plain' },
    { text: 'async', type: 'keyword' },
    { text: ' ', type: 'plain' },
    { text: 'with', type: 'keyword' },
    { text: ' aiohttp.', type: 'plain' },
    { text: 'ClientSession', type: 'type' },
    { text: '() ', type: 'operator' },
    { text: 'as', type: 'keyword' },
    { text: ' session:\n            ', type: 'plain' },
    { text: 'async', type: 'keyword' },
    { text: ' ', type: 'plain' },
    { text: 'with', type: 'keyword' },
    { text: ' session.', type: 'plain' },
    { text: 'get', type: 'function' },
    { text: '(', type: 'operator' },
    { text: 'f"/api/users/{', type: 'string' },
    { text: 'user_id', type: 'variable' },
    { text: '}"', type: 'string' },
    { text: ') ', type: 'operator' },
    { text: 'as', type: 'keyword' },
    { text: ' response:\n                ', type: 'plain' },
    { text: 'return', type: 'keyword' },
    { text: ' ', type: 'plain' },
    { text: 'await', type: 'keyword' },
    { text: ' response.', type: 'plain' },
    { text: 'json', type: 'function' },
    { text: '()\n    ', type: 'operator' },
    { text: 'except', type: 'keyword' },
    { text: ' ', type: 'plain' },
    { text: 'Exception', type: 'type' },
    { text: ' ', type: 'plain' },
    { text: 'as', type: 'keyword' },
    { text: ' e:\n        ', type: 'plain' },
    { text: 'print', type: 'function' },
    { text: '(', type: 'operator' },
    { text: 'f"Error: {', type: 'string' },
    { text: 'e', type: 'variable' },
    { text: '}"', type: 'string' },
    { text: ')', type: 'operator' },
  ]
};

// Example: List Slicing
export const listSlicingExample: CodeExample = {
  id: 'python-list-slicing',
  title: '리스트 슬라이싱',
  language: 'python',
  difficulty: 'beginner',
  description: '파이썬의 강력한 리스트 슬라이싱 기능을 연습합니다.',
  tags: ['list', 'slicing', 'indexing'],
  estimatedTime: 35,
  code: [
    { text: 'numbers', type: 'variable' },
    { text: ' = [', type: 'operator' },
    { text: '1', type: 'number' },
    { text: ', ', type: 'plain' },
    { text: '2', type: 'number' },
    { text: ', ', type: 'plain' },
    { text: '3', type: 'number' },
    { text: ', ', type: 'plain' },
    { text: '4', type: 'number' },
    { text: ', ', type: 'plain' },
    { text: '5', type: 'number' },
    { text: ']\n\n', type: 'plain' },
    { text: 'first_three', type: 'variable' },
    { text: ' = ', type: 'operator' },
    { text: 'numbers', type: 'variable' },
    { text: '[:', type: 'operator' },
    { text: '3', type: 'number' },
    { text: ']\n', type: 'plain' },
    { text: 'last_two', type: 'variable' },
    { text: ' = ', type: 'operator' },
    { text: 'numbers', type: 'variable' },
    { text: '[-', type: 'operator' },
    { text: '2', type: 'number' },
    { text: ':]\n', type: 'plain' },
    { text: 'reversed_list', type: 'variable' },
    { text: ' = ', type: 'operator' },
    { text: 'numbers', type: 'variable' },
    { text: '[::', type: 'operator' },
    { text: '-1', type: 'number' },
    { text: ']', type: 'operator' },
  ]
};

// Example: String Methods
export const stringMethodsExample: CodeExample = {
  id: 'python-string-methods',
  title: '문자열 메서드',
  language: 'python',
  difficulty: 'beginner',
  description: '파이썬의 다양한 문자열 메서드 사용을 연습합니다.',
  tags: ['string', 'methods', 'manipulation'],
  estimatedTime: 40,
  code: [
    { text: 'text', type: 'variable' },
    { text: ' = ', type: 'operator' },
    { text: '"  Hello, Python!  "', type: 'string' },
    { text: '\n\n', type: 'plain' },
    { text: 'stripped', type: 'variable' },
    { text: ' = ', type: 'operator' },
    { text: 'text', type: 'variable' },
    { text: '.', type: 'operator' },
    { text: 'strip', type: 'function' },
    { text: '()\n', type: 'plain' },
    { text: 'uppercase', type: 'variable' },
    { text: ' = ', type: 'operator' },
    { text: 'text', type: 'variable' },
    { text: '.', type: 'operator' },
    { text: 'upper', type: 'function' },
    { text: '()\n', type: 'plain' },
    { text: 'replaced', type: 'variable' },
    { text: ' = ', type: 'operator' },
    { text: 'text', type: 'variable' },
    { text: '.', type: 'operator' },
    { text: 'replace', type: 'function' },
    { text: '(', type: 'operator' },
    { text: '"Python"', type: 'string' },
    { text: ', ', type: 'plain' },
    { text: '"World"', type: 'string' },
    { text: ')', type: 'operator' },
  ]
};

// Example: Dictionary Basics
export const dictionaryExample: CodeExample = {
  id: 'python-dictionary',
  title: '딕셔너리 기초',
  language: 'python',
  difficulty: 'beginner',
  description: '파이썬 딕셔너리의 기본적인 사용법을 연습합니다.',
  tags: ['dictionary', 'key-value', 'mapping'],
  estimatedTime: 45,
  code: [
    { text: 'student', type: 'variable' },
    { text: ' = {\n    ', type: 'operator' },
    { text: '"name"', type: 'string' },
    { text: ': ', type: 'operator' },
    { text: '"김철수"', type: 'string' },
    { text: ',\n    ', type: 'plain' },
    { text: '"age"', type: 'string' },
    { text: ': ', type: 'operator' },
    { text: '20', type: 'number' },
    { text: ',\n    ', type: 'plain' },
    { text: '"scores"', type: 'string' },
    { text: ': [', type: 'operator' },
    { text: '85', type: 'number' },
    { text: ', ', type: 'plain' },
    { text: '90', type: 'number' },
    { text: ', ', type: 'plain' },
    { text: '95', type: 'number' },
    { text: ']\n}\n\n', type: 'plain' },
    { text: 'name', type: 'variable' },
    { text: ' = ', type: 'operator' },
    { text: 'student', type: 'variable' },
    { text: '[', type: 'operator' },
    { text: '"name"', type: 'string' },
    { text: ']\n', type: 'operator' },
    { text: 'student', type: 'variable' },
    { text: '[', type: 'operator' },
    { text: '"grade"', type: 'string' },
    { text: '] = ', type: 'operator' },
    { text: '"A"', type: 'string' },
  ]
};

// Example: While Loop
export const whileLoopExample: CodeExample = {
  id: 'python-while-loop',
  title: 'while 반복문',
  language: 'python',
  difficulty: 'beginner',
  description: 'while 반복문의 기본 사용법을 연습합니다.',
  tags: ['loop', 'while', 'condition'],
  estimatedTime: 35,
  code: [
    { text: 'count', type: 'variable' },
    { text: ' = ', type: 'operator' },
    { text: '1', type: 'number' },
    { text: '\n', type: 'plain' },
    { text: 'while', type: 'keyword' },
    { text: ' ', type: 'plain' },
    { text: 'count', type: 'variable' },
    { text: ' <= ', type: 'operator' },
    { text: '5', type: 'number' },
    { text: ':\n    ', type: 'plain' },
    { text: 'print', type: 'function' },
    { text: '(', type: 'operator' },
    { text: 'f"카운트: {', type: 'string' },
    { text: 'count', type: 'variable' },
    { text: '}"', type: 'string' },
    { text: ')\n    ', type: 'operator' },
    { text: 'count', type: 'variable' },
    { text: ' += ', type: 'operator' },
    { text: '1', type: 'number' },
  ]
};

// Example: File I/O Basics
export const fileIOExample: CodeExample = {
  id: 'python-file-io',
  title: '파일 입출력',
  language: 'python',
  difficulty: 'beginner',
  description: '기본적인 파일 읽기와 쓰기를 연습합니다.',
  tags: ['file', 'io', 'read', 'write'],
  estimatedTime: 40,
  code: [
    { text: '# 파일 쓰기\n', type: 'comment' },
    { text: 'with', type: 'keyword' },
    { text: ' ', type: 'plain' },
    { text: 'open', type: 'function' },
    { text: '(', type: 'operator' },
    { text: '"message.txt"', type: 'string' },
    { text: ', ', type: 'plain' },
    { text: '"w"', type: 'string' },
    { text: ') ', type: 'operator' },
    { text: 'as', type: 'keyword' },
    { text: ' ', type: 'plain' },
    { text: 'file', type: 'variable' },
    { text: ':\n    ', type: 'plain' },
    { text: 'file', type: 'variable' },
    { text: '.', type: 'operator' },
    { text: 'write', type: 'function' },
    { text: '(', type: 'operator' },
    { text: '"안녕하세요!"', type: 'string' },
    { text: ')\n\n', type: 'operator' },
    { text: '# 파일 읽기\n', type: 'comment' },
    { text: 'with', type: 'keyword' },
    { text: ' ', type: 'plain' },
    { text: 'open', type: 'function' },
    { text: '(', type: 'operator' },
    { text: '"message.txt"', type: 'string' },
    { text: ', ', type: 'plain' },
    { text: '"r"', type: 'string' },
    { text: ') ', type: 'operator' },
    { text: 'as', type: 'keyword' },
    { text: ' ', type: 'plain' },
    { text: 'file', type: 'variable' },
    { text: ':\n    ', type: 'plain' },
    { text: 'content', type: 'variable' },
    { text: ' = ', type: 'operator' },
    { text: 'file', type: 'variable' },
    { text: '.', type: 'operator' },
    { text: 'read', type: 'function' },
    { text: '()', type: 'operator' },
  ]
};

// Example: Decorator Pattern
export const decoratorExample: CodeExample = {
  id: 'python-decorator',
  title: '데코레이터 패턴',
  language: 'python',
  difficulty: 'intermediate',
  description: '파이썬의 데코레이터를 사용하여 함수의 기능을 확장하는 방법을 연습합니다.',
  tags: ['decorator', 'metaprogramming', 'wrapper'],
  estimatedTime: 50,
  code: [
    { text: 'def', type: 'keyword' },
    { text: ' ', type: 'plain' },
    { text: 'timer', type: 'function' },
    { text: '(', type: 'operator' },
    { text: 'func', type: 'variable' },
    { text: '):\n    ', type: 'operator' },
    { text: 'from', type: 'keyword' },
    { text: ' time ', type: 'plain' },
    { text: 'import', type: 'keyword' },
    { text: ' time\n    \n    ', type: 'plain' },
    { text: 'def', type: 'keyword' },
    { text: ' ', type: 'plain' },
    { text: 'wrapper', type: 'function' },
    { text: '(*', type: 'operator' },
    { text: 'args', type: 'variable' },
    { text: ', **', type: 'operator' },
    { text: 'kwargs', type: 'variable' },
    { text: '):\n        ', type: 'operator' },
    { text: 'start', type: 'variable' },
    { text: ' = ', type: 'operator' },
    { text: 'time', type: 'function' },
    { text: '()\n        ', type: 'operator' },
    { text: 'result', type: 'variable' },
    { text: ' = ', type: 'operator' },
    { text: 'func', type: 'function' },
    { text: '(*', type: 'operator' },
    { text: 'args', type: 'variable' },
    { text: ', **', type: 'operator' },
    { text: 'kwargs', type: 'variable' },
    { text: ')\n        ', type: 'operator' },
    { text: 'end', type: 'variable' },
    { text: ' = ', type: 'operator' },
    { text: 'time', type: 'function' },
    { text: '()\n        ', type: 'operator' },
    { text: 'print', type: 'function' },
    { text: '(', type: 'operator' },
    { text: 'f"실행 시간: {', type: 'string' },
    { text: 'end - start', type: 'variable' },
    { text: ':.2f}초"', type: 'string' },
    { text: ')\n        ', type: 'operator' },
    { text: 'return', type: 'keyword' },
    { text: ' ', type: 'plain' },
    { text: 'result', type: 'variable' },
    { text: '\n    \n    ', type: 'operator' },
    { text: 'return', type: 'keyword' },
    { text: ' ', type: 'plain' },
    { text: 'wrapper', type: 'variable' },
    { text: '\n\n', type: 'operator' },
    { text: '@', type: 'operator' },
    { text: 'timer\n', type: 'variable' },
    { text: 'def', type: 'keyword' },
    { text: ' ', type: 'plain' },
    { text: 'process_data', type: 'function' },
    { text: '():\n    ', type: 'operator' },
    { text: 'import', type: 'keyword' },
    { text: ' time\n    time.', type: 'plain' },
    { text: 'sleep', type: 'function' },
    { text: '(', type: 'operator' },
    { text: '2', type: 'number' },
    { text: ')', type: 'operator' },
  ]
};

// Example: Context Manager
export const contextManagerExample: CodeExample = {
  id: 'python-context-manager',
  title: '컨텍스트 매니저',
  language: 'python',
  difficulty: 'intermediate',
  description: '커스텀 컨텍스트 매니저를 구현하여 리소스를 관리하는 방법을 연습합니다.',
  tags: ['context manager', 'with statement', 'resource management'],
  estimatedTime: 45,
  code: [
    { text: 'class', type: 'keyword' },
    { text: ' ', type: 'plain' },
    { text: 'Timer', type: 'type' },
    { text: ':\n    ', type: 'operator' },
    { text: 'def', type: 'keyword' },
    { text: ' ', type: 'plain' },
    { text: '__enter__', type: 'function' },
    { text: '(', type: 'operator' },
    { text: 'self', type: 'variable' },
    { text: '):\n        ', type: 'operator' },
    { text: 'import', type: 'keyword' },
    { text: ' time\n        ', type: 'plain' },
    { text: 'self', type: 'variable' },
    { text: '.', type: 'operator' },
    { text: 'start', type: 'variable' },
    { text: ' = time.', type: 'plain' },
    { text: 'time', type: 'function' },
    { text: '()\n        ', type: 'operator' },
    { text: 'return', type: 'keyword' },
    { text: ' ', type: 'plain' },
    { text: 'self', type: 'variable' },
    { text: '\n\n    ', type: 'operator' },
    { text: 'def', type: 'keyword' },
    { text: ' ', type: 'plain' },
    { text: '__exit__', type: 'function' },
    { text: '(', type: 'operator' },
    { text: 'self', type: 'variable' },
    { text: ', *', type: 'operator' },
    { text: 'args', type: 'variable' },
    { text: '):\n        ', type: 'operator' },
    { text: 'import', type: 'keyword' },
    { text: ' time\n        end = time.', type: 'plain' },
    { text: 'time', type: 'function' },
    { text: '()\n        ', type: 'operator' },
    { text: 'print', type: 'function' },
    { text: '(', type: 'operator' },
    { text: 'f"경과 시간: {', type: 'string' },
    { text: 'end - self.start', type: 'variable' },
    { text: ':.2f}초"', type: 'string' },
    { text: ')', type: 'operator' },
  ]
};

// Example: Generator
export const generatorExample: CodeExample = {
  id: 'python-generator',
  title: '제너레이터',
  language: 'python',
  difficulty: 'intermediate',
  description: '제너레이터를 사용하여 메모리 효율적인 데이터 처리 방법을 연습합니다.',
  tags: ['generator', 'yield', 'iteration'],
  estimatedTime: 40,
  code: [
    { text: 'def', type: 'keyword' },
    { text: ' ', type: 'plain' },
    { text: 'fibonacci', type: 'function' },
    { text: '(', type: 'operator' },
    { text: 'n', type: 'variable' },
    { text: '):\n    ', type: 'operator' },
    { text: 'a', type: 'variable' },
    { text: ', ', type: 'plain' },
    { text: 'b', type: 'variable' },
    { text: ' = ', type: 'operator' },
    { text: '0', type: 'number' },
    { text: ', ', type: 'plain' },
    { text: '1', type: 'number' },
    { text: '\n    ', type: 'plain' },
    { text: 'for', type: 'keyword' },
    { text: ' _ ', type: 'plain' },
    { text: 'in', type: 'keyword' },
    { text: ' ', type: 'plain' },
    { text: 'range', type: 'function' },
    { text: '(', type: 'operator' },
    { text: 'n', type: 'variable' },
    { text: '):\n        ', type: 'operator' },
    { text: 'yield', type: 'keyword' },
    { text: ' ', type: 'plain' },
    { text: 'a', type: 'variable' },
    { text: '\n        ', type: 'operator' },
    { text: 'a', type: 'variable' },
    { text: ', ', type: 'plain' },
    { text: 'b', type: 'variable' },
    { text: ' = ', type: 'operator' },
    { text: 'b', type: 'variable' },
    { text: ', ', type: 'plain' },
    { text: 'a + b', type: 'variable' },
  ]
};

// Example: Functional Programming
export const functionalExample: CodeExample = {
  id: 'python-functional',
  title: '함수형 프로그래밍',
  language: 'python',
  difficulty: 'intermediate',
  description: '람다 함수와 함수형 프로그래밍 도구들을 활용하는 방법을 연습합니다.',
  tags: ['lambda', 'map', 'filter', 'reduce'],
  estimatedTime: 45,
  code: [
    { text: 'from', type: 'keyword' },
    { text: ' functools ', type: 'plain' },
    { text: 'import', type: 'keyword' },
    { text: ' reduce\n\n', type: 'plain' },
    { text: 'numbers', type: 'variable' },
    { text: ' = [', type: 'operator' },
    { text: '1', type: 'number' },
    { text: ', ', type: 'plain' },
    { text: '2', type: 'number' },
    { text: ', ', type: 'plain' },
    { text: '3', type: 'number' },
    { text: ', ', type: 'plain' },
    { text: '4', type: 'number' },
    { text: ', ', type: 'plain' },
    { text: '5', type: 'number' },
    { text: ']\n\n', type: 'operator' },
    { text: 'doubled', type: 'variable' },
    { text: ' = ', type: 'operator' },
    { text: 'list', type: 'function' },
    { text: '(', type: 'operator' },
    { text: 'map', type: 'function' },
    { text: '(', type: 'operator' },
    { text: 'lambda', type: 'keyword' },
    { text: ' ', type: 'plain' },
    { text: 'x', type: 'variable' },
    { text: ': ', type: 'operator' },
    { text: 'x', type: 'variable' },
    { text: ' * ', type: 'operator' },
    { text: '2', type: 'number' },
    { text: ', numbers))\n', type: 'operator' },
    { text: 'evens', type: 'variable' },
    { text: ' = ', type: 'operator' },
    { text: 'list', type: 'function' },
    { text: '(', type: 'operator' },
    { text: 'filter', type: 'function' },
    { text: '(', type: 'operator' },
    { text: 'lambda', type: 'keyword' },
    { text: ' ', type: 'plain' },
    { text: 'x', type: 'variable' },
    { text: ': ', type: 'operator' },
    { text: 'x', type: 'variable' },
    { text: ' % ', type: 'operator' },
    { text: '2', type: 'number' },
    { text: ' == ', type: 'operator' },
    { text: '0', type: 'number' },
    { text: ', numbers))\n', type: 'operator' },
    { text: 'sum_all', type: 'variable' },
    { text: ' = ', type: 'operator' },
    { text: 'reduce', type: 'function' },
    { text: '(', type: 'operator' },
    { text: 'lambda', type: 'keyword' },
    { text: ' ', type: 'plain' },
    { text: 'x', type: 'variable' },
    { text: ', ', type: 'plain' },
    { text: 'y', type: 'variable' },
    { text: ': ', type: 'operator' },
    { text: 'x', type: 'variable' },
    { text: ' + ', type: 'operator' },
    { text: 'y', type: 'variable' },
    { text: ', numbers)', type: 'operator' },
  ]
};

// Example: Type Hints and Dataclass
export const typeHintsExample: CodeExample = {
  id: 'python-type-hints',
  title: '타입 힌트와 데이터클래스',
  language: 'python',
  difficulty: 'intermediate',
  description: '타입 힌트와 데이터클래스를 활용하여 안전한 코드를 작성하는 방법을 연습합니다.',
  tags: ['type hints', 'dataclass', 'static typing'],
  estimatedTime: 50,
  code: [
    { text: 'from', type: 'keyword' },
    { text: ' dataclasses ', type: 'plain' },
    { text: 'import', type: 'keyword' },
    { text: ' dataclass\n', type: 'plain' },
    { text: 'from', type: 'keyword' },
    { text: ' typing ', type: 'plain' },
    { text: 'import', type: 'keyword' },
    { text: ' List, Optional\n\n', type: 'plain' },
    { text: '@', type: 'operator' },
    { text: 'dataclass\n', type: 'variable' },
    { text: 'class', type: 'keyword' },
    { text: ' ', type: 'plain' },
    { text: 'Student', type: 'type' },
    { text: ':\n    ', type: 'operator' },
    { text: 'name', type: 'variable' },
    { text: ': ', type: 'operator' },
    { text: 'str', type: 'type' },
    { text: '\n    ', type: 'plain' },
    { text: 'age', type: 'variable' },
    { text: ': ', type: 'operator' },
    { text: 'int', type: 'type' },
    { text: '\n    ', type: 'plain' },
    { text: 'grades', type: 'variable' },
    { text: ': ', type: 'operator' },
    { text: 'List', type: 'type' },
    { text: '[', type: 'operator' },
    { text: 'int', type: 'type' },
    { text: ']\n    ', type: 'operator' },
    { text: 'email', type: 'variable' },
    { text: ': ', type: 'operator' },
    { text: 'Optional', type: 'type' },
    { text: '[', type: 'operator' },
    { text: 'str', type: 'type' },
    { text: '] = ', type: 'operator' },
    { text: 'None', type: 'keyword' },
  ]
};

// Export all Python examples
export const pythonExamples = [
  basicFunction,
  listSlicingExample,
  stringMethodsExample,
  dictionaryExample,
  whileLoopExample,
  fileIOExample,
  classExample,
  listComprehensionExample,
  asyncExample,
  decoratorExample,
  contextManagerExample,
  generatorExample,
  functionalExample,
  typeHintsExample,
]; 