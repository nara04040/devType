import { CodeExample } from '@/types/typing';

// Example 1: Basic Function
export const basicFunction: CodeExample = {
  id: 'js-basic-function',
  title: '기본 함수',
  language: 'javascript',
  difficulty: 'beginner',
  description: '기본적인 함수 선언과 문자열 반환을 연습합니다.',
  tags: ['function', 'string', 'return'],
  estimatedTime: 30,
  code: [
    { text: 'function', type: 'keyword' },
    { text: ' ', type: 'plain' },
    { text: 'greet', type: 'function' },
    { text: '(', type: 'operator' },
    { text: 'name', type: 'variable' },
    { text: ':', type: 'operator' },
    { text: ' string', type: 'type' },
    { text: ') ', type: 'operator' },
    { text: '{\n  ', type: 'plain' },
    { text: 'return', type: 'keyword' },
    { text: ' ', type: 'plain' },
    { text: '"Hello, "', type: 'string' },
    { text: ' + ', type: 'operator' },
    { text: 'name', type: 'variable' },
    { text: ';\n}', type: 'plain' },
  ]
};

// Example: Variables
export const variablesExample: CodeExample = {
  id: 'js-variables',
  title: '변수 선언',
  language: 'javascript',
  difficulty: 'beginner',
  description: '변수 선언과 할당을 연습합니다. (let, const)',
  tags: ['variables', 'let', 'const'],
  estimatedTime: 30,
  code: [
    { text: 'let', type: 'keyword' },
    { text: ' ', type: 'plain' },
    { text: 'count', type: 'variable' },
    { text: ' = ', type: 'operator' },
    { text: '0', type: 'number' },
    { text: ';\n', type: 'plain' },
    { text: 'const', type: 'keyword' },
    { text: ' ', type: 'plain' },
    { text: 'PI', type: 'variable' },
    { text: ' = ', type: 'operator' },
    { text: '3.14', type: 'number' },
    { text: ';\n\n', type: 'plain' },
    { text: 'count', type: 'variable' },
    { text: ' = ', type: 'operator' },
    { text: 'count', type: 'variable' },
    { text: ' + ', type: 'operator' },
    { text: '1', type: 'number' },
    { text: ';', type: 'plain' },
  ]
};

// Example: Conditional Statement
export const conditionalExample: CodeExample = {
  id: 'js-conditional',
  title: '조건문',
  language: 'javascript',
  difficulty: 'beginner',
  description: 'if-else 조건문 사용을 연습합니다.',
  tags: ['if', 'else', 'condition'],
  estimatedTime: 40,
  code: [
    { text: 'const', type: 'keyword' },
    { text: ' ', type: 'plain' },
    { text: 'age', type: 'variable' },
    { text: ' = ', type: 'operator' },
    { text: '18', type: 'number' },
    { text: ';\n\n', type: 'plain' },
    { text: 'if', type: 'keyword' },
    { text: ' (', type: 'operator' },
    { text: 'age', type: 'variable' },
    { text: ' >= ', type: 'operator' },
    { text: '18', type: 'number' },
    { text: ') {\n  ', type: 'plain' },
    { text: 'console', type: 'variable' },
    { text: '.', type: 'operator' },
    { text: 'log', type: 'function' },
    { text: '(', type: 'operator' },
    { text: '"성인입니다."', type: 'string' },
    { text: ')', type: 'operator' },
    { text: ';\n} ', type: 'plain' },
    { text: 'else', type: 'keyword' },
    { text: ' {\n  ', type: 'plain' },
    { text: 'console', type: 'variable' },
    { text: '.', type: 'operator' },
    { text: 'log', type: 'function' },
    { text: '(', type: 'operator' },
    { text: '"미성년자입니다."', type: 'string' },
    { text: ')', type: 'operator' },
    { text: ';\n}', type: 'plain' },
  ]
};

// Example: For Loop
export const forLoopExample: CodeExample = {
  id: 'js-for-loop',
  title: '반복문',
  language: 'javascript',
  difficulty: 'beginner',
  description: 'for 반복문 사용을 연습합니다.',
  tags: ['loop', 'for', 'iteration'],
  estimatedTime: 35,
  code: [
    { text: 'const', type: 'keyword' },
    { text: ' ', type: 'plain' },
    { text: 'fruits', type: 'variable' },
    { text: ' = [', type: 'operator' },
    { text: '"사과"', type: 'string' },
    { text: ', ', type: 'plain' },
    { text: '"바나나"', type: 'string' },
    { text: ', ', type: 'plain' },
    { text: '"오렌지"', type: 'string' },
    { text: '];\n\n', type: 'plain' },
    { text: 'for', type: 'keyword' },
    { text: ' (', type: 'operator' },
    { text: 'let', type: 'keyword' },
    { text: ' ', type: 'plain' },
    { text: 'i', type: 'variable' },
    { text: ' = ', type: 'operator' },
    { text: '0', type: 'number' },
    { text: '; ', type: 'plain' },
    { text: 'i', type: 'variable' },
    { text: ' < ', type: 'operator' },
    { text: 'fruits', type: 'variable' },
    { text: '.', type: 'operator' },
    { text: 'length', type: 'property' },
    { text: '; ', type: 'plain' },
    { text: 'i', type: 'variable' },
    { text: '++', type: 'operator' },
    { text: ') {\n  ', type: 'plain' },
    { text: 'console', type: 'variable' },
    { text: '.', type: 'operator' },
    { text: 'log', type: 'function' },
    { text: '(', type: 'operator' },
    { text: 'fruits', type: 'variable' },
    { text: '[', type: 'operator' },
    { text: 'i', type: 'variable' },
    { text: ']', type: 'operator' },
    { text: ')', type: 'operator' },
    { text: ';\n}', type: 'plain' },
  ]
};

// Example: Array Methods
export const arrayMethodsExample: CodeExample = {
  id: 'js-array-methods-basic',
  title: '배열 메서드',
  language: 'javascript',
  difficulty: 'beginner',
  description: '기본적인 배열 메서드(push, pop) 사용을 연습합니다.',
  tags: ['array', 'push', 'pop'],
  estimatedTime: 35,
  code: [
    { text: 'const', type: 'keyword' },
    { text: ' ', type: 'plain' },
    { text: 'stack', type: 'variable' },
    { text: ' = [', type: 'operator' },
    { text: '1', type: 'number' },
    { text: ', ', type: 'plain' },
    { text: '2', type: 'number' },
    { text: '];\n\n', type: 'plain' },
    { text: 'stack', type: 'variable' },
    { text: '.', type: 'operator' },
    { text: 'push', type: 'function' },
    { text: '(', type: 'operator' },
    { text: '3', type: 'number' },
    { text: ')', type: 'operator' },
    { text: ';\n', type: 'plain' },
    { text: 'const', type: 'keyword' },
    { text: ' ', type: 'plain' },
    { text: 'last', type: 'variable' },
    { text: ' = ', type: 'operator' },
    { text: 'stack', type: 'variable' },
    { text: '.', type: 'operator' },
    { text: 'pop', type: 'function' },
    { text: '()', type: 'operator' },
    { text: ';', type: 'plain' },
  ]
};

// Example: Template Literals
export const templateLiteralExample: CodeExample = {
  id: 'js-template-literal',
  title: '템플릿 리터럴',
  language: 'javascript',
  difficulty: 'beginner',
  description: '템플릿 리터럴을 사용한 문자열 보간을 연습합니다.',
  tags: ['string', 'template-literal', 'interpolation'],
  estimatedTime: 30,
  code: [
    { text: 'const', type: 'keyword' },
    { text: ' ', type: 'plain' },
    { text: 'name', type: 'variable' },
    { text: ' = ', type: 'operator' },
    { text: '"홍길동"', type: 'string' },
    { text: ';\n', type: 'plain' },
    { text: 'const', type: 'keyword' },
    { text: ' ', type: 'plain' },
    { text: 'age', type: 'variable' },
    { text: ' = ', type: 'operator' },
    { text: '20', type: 'number' },
    { text: ';\n\n', type: 'plain' },
    { text: 'const', type: 'keyword' },
    { text: ' ', type: 'plain' },
    { text: 'message', type: 'variable' },
    { text: ' = ', type: 'operator' },
    { text: '`안녕하세요, ${', type: 'string' },
    { text: 'name', type: 'variable' },
    { text: '}님! ', type: 'string' },
    { text: '${', type: 'operator' },
    { text: 'age', type: 'variable' },
    { text: '}살이시군요.`', type: 'string' },
    { text: ';', type: 'plain' },
  ]
};

// Example 2: Class Definition
export const classExample: CodeExample = {
  id: 'js-class-definition',
  title: '클래스 정의',
  language: 'javascript',
  difficulty: 'intermediate',
  description: '클래스 선언과 메서드 구현을 연습합니다.',
  tags: ['class', 'constructor', 'method'],
  estimatedTime: 60,
  code: [
    { text: 'class', type: 'keyword' },
    { text: ' ', type: 'plain' },
    { text: 'User', type: 'type' },
    { text: ' ', type: 'plain' },
    { text: '{\n  ', type: 'plain' },
    { text: 'private', type: 'keyword' },
    { text: ' ', type: 'plain' },
    { text: 'name', type: 'property' },
    { text: ':', type: 'operator' },
    { text: ' string', type: 'type' },
    { text: ';\n\n  ', type: 'plain' },
    { text: 'constructor', type: 'function' },
    { text: '(', type: 'operator' },
    { text: 'name', type: 'variable' },
    { text: ':', type: 'operator' },
    { text: ' string', type: 'type' },
    { text: ') ', type: 'operator' },
    { text: '{\n    ', type: 'plain' },
    { text: 'this', type: 'keyword' },
    { text: '.', type: 'operator' },
    { text: 'name', type: 'property' },
    { text: ' = ', type: 'operator' },
    { text: 'name', type: 'variable' },
    { text: ';\n  ', type: 'plain' },
    { text: '}\n\n  ', type: 'plain' },
    { text: 'getName', type: 'function' },
    { text: '(', type: 'operator' },
    { text: ')', type: 'operator' },
    { text: ' ', type: 'plain' },
    { text: '{\n    ', type: 'plain' },
    { text: 'return', type: 'keyword' },
    { text: ' ', type: 'plain' },
    { text: 'this', type: 'keyword' },
    { text: '.', type: 'operator' },
    { text: 'name', type: 'property' },
    { text: ';\n  ', type: 'plain' },
    { text: '}\n}', type: 'plain' },
  ]
};

// Example 3: Array Methods
export const arrayExample: CodeExample = {
  id: 'js-array-methods',
  title: '배열 메서드',
  language: 'javascript',
  difficulty: 'beginner',
  description: '배열과 map 메서드 사용을 연습합니다.',
  tags: ['array', 'map', 'arrow-function'],
  estimatedTime: 45,
  code: [
    { text: 'const', type: 'keyword' },
    { text: ' ', type: 'plain' },
    { text: 'numbers', type: 'variable' },
    { text: ' = ', type: 'operator' },
    { text: '[', type: 'operator' },
    { text: '1', type: 'number' },
    { text: ', ', type: 'plain' },
    { text: '2', type: 'number' },
    { text: ', ', type: 'plain' },
    { text: '3', type: 'number' },
    { text: ', ', type: 'plain' },
    { text: '4', type: 'number' },
    { text: ', ', type: 'plain' },
    { text: '5', type: 'number' },
    { text: ']', type: 'operator' },
    { text: ';\n\n', type: 'plain' },
    { text: 'const', type: 'keyword' },
    { text: ' ', type: 'plain' },
    { text: 'doubled', type: 'variable' },
    { text: ' = ', type: 'operator' },
    { text: 'numbers', type: 'variable' },
    { text: '.', type: 'operator' },
    { text: 'map', type: 'function' },
    { text: '(', type: 'operator' },
    { text: 'num', type: 'variable' },
    { text: ' => ', type: 'operator' },
    { text: 'num', type: 'variable' },
    { text: ' * ', type: 'operator' },
    { text: '2', type: 'number' },
    { text: ')', type: 'operator' },
    { text: ';\n', type: 'plain' },
  ]
};

// Example: Destructuring and Spread
export const destructuringExample: CodeExample = {
  id: 'js-destructuring',
  title: '구조 분해와 전개',
  language: 'javascript',
  difficulty: 'intermediate',
  description: '객체/배열 구조 분해 할당과 전개 연산자 사용을 연습합니다.',
  tags: ['destructuring', 'spread', 'object', 'array'],
  estimatedTime: 45,
  code: [
    { text: 'const', type: 'keyword' },
    { text: ' ', type: 'plain' },
    { text: 'user', type: 'variable' },
    { text: ' = {\n  ', type: 'plain' },
    { text: 'name', type: 'property' },
    { text: ': ', type: 'operator' },
    { text: '"John"', type: 'string' },
    { text: ',\n  ', type: 'plain' },
    { text: 'age', type: 'property' },
    { text: ': ', type: 'operator' },
    { text: '30', type: 'number' },
    { text: ',\n  ', type: 'plain' },
    { text: 'skills', type: 'property' },
    { text: ': [', type: 'operator' },
    { text: '"JS"', type: 'string' },
    { text: ', ', type: 'plain' },
    { text: '"TS"', type: 'string' },
    { text: ']\n};\n\n', type: 'plain' },
    { text: 'const', type: 'keyword' },
    { text: ' { ', type: 'plain' },
    { text: 'name', type: 'variable' },
    { text: ', ', type: 'plain' },
    { text: 'skills', type: 'variable' },
    { text: ': [', type: 'operator' },
    { text: 'firstSkill', type: 'variable' },
    { text: '] } = ', type: 'operator' },
    { text: 'user', type: 'variable' },
    { text: ';\n\n', type: 'plain' },
    { text: 'const', type: 'keyword' },
    { text: ' ', type: 'plain' },
    { text: 'newUser', type: 'variable' },
    { text: ' = { ...', type: 'operator' },
    { text: 'user', type: 'variable' },
    { text: ', ', type: 'plain' },
    { text: 'role', type: 'property' },
    { text: ': ', type: 'operator' },
    { text: '"admin"', type: 'string' },
    { text: ' };', type: 'plain' },
  ]
};

// Example: Promise Chaining
export const promiseExample: CodeExample = {
  id: 'js-promise-chain',
  title: 'Promise 체이닝',
  language: 'javascript',
  difficulty: 'intermediate',
  description: 'Promise 체이닝을 통한 비동기 작업 처리를 연습합니다.',
  tags: ['promise', 'then', 'catch', 'async'],
  estimatedTime: 50,
  code: [
    { text: 'fetch', type: 'function' },
    { text: '(', type: 'operator' },
    { text: '"/api/user/1"', type: 'string' },
    { text: ')\n  .', type: 'plain' },
    { text: 'then', type: 'function' },
    { text: '(', type: 'operator' },
    { text: 'response', type: 'variable' },
    { text: ' => ', type: 'operator' },
    { text: 'response', type: 'variable' },
    { text: '.', type: 'operator' },
    { text: 'json', type: 'function' },
    { text: '()', type: 'operator' },
    { text: ')\n  .', type: 'plain' },
    { text: 'then', type: 'function' },
    { text: '(', type: 'operator' },
    { text: 'user', type: 'variable' },
    { text: ' => {\n    ', type: 'plain' },
    { text: 'return', type: 'keyword' },
    { text: ' ', type: 'plain' },
    { text: 'fetch', type: 'function' },
    { text: '(', type: 'operator' },
    { text: '`/api/posts/${', type: 'string' },
    { text: 'user', type: 'variable' },
    { text: '.', type: 'operator' },
    { text: 'id', type: 'property' },
    { text: '}`', type: 'string' },
    { text: ');\n  })', type: 'plain' },
    { text: '\n  .', type: 'plain' },
    { text: 'then', type: 'function' },
    { text: '(', type: 'operator' },
    { text: 'posts', type: 'variable' },
    { text: ' => ', type: 'operator' },
    { text: 'console', type: 'variable' },
    { text: '.', type: 'operator' },
    { text: 'log', type: 'function' },
    { text: '(', type: 'operator' },
    { text: 'posts', type: 'variable' },
    { text: '))', type: 'operator' },
    { text: '\n  .', type: 'plain' },
    { text: 'catch', type: 'function' },
    { text: '(', type: 'operator' },
    { text: 'error', type: 'variable' },
    { text: ' => ', type: 'operator' },
    { text: 'console', type: 'variable' },
    { text: '.', type: 'operator' },
    { text: 'error', type: 'function' },
    { text: '(', type: 'operator' },
    { text: 'error', type: 'variable' },
    { text: '));', type: 'operator' },
  ]
};

// Example: Higher Order Functions
export const higherOrderExample: CodeExample = {
  id: 'js-higher-order',
  title: '고차 함수',
  language: 'javascript',
  difficulty: 'intermediate',
  description: 'map, filter, reduce와 같은 고차 함수 사용을 연습합니다.',
  tags: ['map', 'filter', 'reduce', 'array'],
  estimatedTime: 55,
  code: [
    { text: 'const', type: 'keyword' },
    { text: ' ', type: 'plain' },
    { text: 'numbers', type: 'variable' },
    { text: ' = [', type: 'operator' },
    { text: '1', type: 'number' },
    { text: ', ', type: 'plain' },
    { text: '2', type: 'number' },
    { text: ', ', type: 'plain' },
    { text: '3', type: 'number' },
    { text: ', ', type: 'plain' },
    { text: '4', type: 'number' },
    { text: ', ', type: 'plain' },
    { text: '5', type: 'number' },
    { text: '];\n\n', type: 'plain' },
    { text: 'const', type: 'keyword' },
    { text: ' ', type: 'plain' },
    { text: 'doubled', type: 'variable' },
    { text: ' = ', type: 'operator' },
    { text: 'numbers', type: 'variable' },
    { text: '.', type: 'operator' },
    { text: 'map', type: 'function' },
    { text: '(', type: 'operator' },
    { text: 'n', type: 'variable' },
    { text: ' => ', type: 'operator' },
    { text: 'n', type: 'variable' },
    { text: ' * ', type: 'operator' },
    { text: '2', type: 'number' },
    { text: ');\n\n', type: 'plain' },
    { text: 'const', type: 'keyword' },
    { text: ' ', type: 'plain' },
    { text: 'evens', type: 'variable' },
    { text: ' = ', type: 'operator' },
    { text: 'numbers', type: 'variable' },
    { text: '.', type: 'operator' },
    { text: 'filter', type: 'function' },
    { text: '(', type: 'operator' },
    { text: 'n', type: 'variable' },
    { text: ' => ', type: 'operator' },
    { text: 'n', type: 'variable' },
    { text: ' % ', type: 'operator' },
    { text: '2', type: 'number' },
    { text: ' === ', type: 'operator' },
    { text: '0', type: 'number' },
    { text: ');\n\n', type: 'plain' },
    { text: 'const', type: 'keyword' },
    { text: ' ', type: 'plain' },
    { text: 'sum', type: 'variable' },
    { text: ' = ', type: 'operator' },
    { text: 'numbers', type: 'variable' },
    { text: '.', type: 'operator' },
    { text: 'reduce', type: 'function' },
    { text: '((', type: 'operator' },
    { text: 'acc', type: 'variable' },
    { text: ', ', type: 'plain' },
    { text: 'n', type: 'variable' },
    { text: ') => ', type: 'operator' },
    { text: 'acc', type: 'variable' },
    { text: ' + ', type: 'operator' },
    { text: 'n', type: 'variable' },
    { text: ', ', type: 'plain' },
    { text: '0', type: 'number' },
    { text: '));', type: 'operator' },
  ]
};

// Example: Generator Function
export const generatorExample: CodeExample = {
  id: 'js-generator',
  title: '제네레이터 함수',
  language: 'javascript',
  difficulty: 'intermediate',
  description: '제네레이터 함수를 사용한 이터레이터 생성을 연습합니다.',
  tags: ['generator', 'iterator', 'yield'],
  estimatedTime: 45,
  code: [
    { text: 'function', type: 'keyword' },
    { text: '* ', type: 'operator' },
    { text: 'numberSequence', type: 'function' },
    { text: '(', type: 'operator' },
    { text: 'start', type: 'variable' },
    { text: ', ', type: 'plain' },
    { text: 'end', type: 'variable' },
    { text: ') {\n  ', type: 'plain' },
    { text: 'for', type: 'keyword' },
    { text: ' (', type: 'operator' },
    { text: 'let', type: 'keyword' },
    { text: ' ', type: 'plain' },
    { text: 'i', type: 'variable' },
    { text: ' = ', type: 'operator' },
    { text: 'start', type: 'variable' },
    { text: '; ', type: 'plain' },
    { text: 'i', type: 'variable' },
    { text: ' <= ', type: 'operator' },
    { text: 'end', type: 'variable' },
    { text: '; ', type: 'plain' },
    { text: 'i', type: 'variable' },
    { text: '++', type: 'operator' },
    { text: ') {\n    ', type: 'plain' },
    { text: 'yield', type: 'keyword' },
    { text: ' ', type: 'plain' },
    { text: 'i', type: 'variable' },
    { text: ';\n  }\n}\n\n', type: 'plain' },
    { text: 'const', type: 'keyword' },
    { text: ' ', type: 'plain' },
    { text: 'numbers', type: 'variable' },
    { text: ' = ', type: 'operator' },
    { text: 'numberSequence', type: 'function' },
    { text: '(', type: 'operator' },
    { text: '1', type: 'number' },
    { text: ', ', type: 'plain' },
    { text: '5', type: 'number' },
    { text: ');\n\n', type: 'operator' },
    { text: 'for', type: 'keyword' },
    { text: ' (', type: 'operator' },
    { text: 'const', type: 'keyword' },
    { text: ' ', type: 'plain' },
    { text: 'num', type: 'variable' },
    { text: ' ', type: 'plain' },
    { text: 'of', type: 'keyword' },
    { text: ' ', type: 'plain' },
    { text: 'numbers', type: 'variable' },
    { text: ') {\n  ', type: 'plain' },
    { text: 'console', type: 'variable' },
    { text: '.', type: 'operator' },
    { text: 'log', type: 'function' },
    { text: '(', type: 'operator' },
    { text: 'num', type: 'variable' },
    { text: ')', type: 'operator' },
    { text: ';\n}', type: 'plain' },
  ]
};

// Example 4: Async/Await
export const asyncExample: CodeExample = {
  id: 'js-async-await',
  title: '비동기 함수',
  language: 'javascript',
  difficulty: 'intermediate',
  description: 'async/await를 사용한 비동기 처리를 연습합니다.',
  tags: ['async', 'await', 'try-catch', 'fetch'],
  estimatedTime: 90,
  code: [
    { text: 'async', type: 'keyword' },
    { text: ' ', type: 'plain' },
    { text: 'function', type: 'keyword' },
    { text: ' ', type: 'plain' },
    { text: 'fetchUser', type: 'function' },
    { text: '(', type: 'operator' },
    { text: 'id', type: 'variable' },
    { text: ':', type: 'operator' },
    { text: ' number', type: 'type' },
    { text: ')', type: 'operator' },
    { text: ' ', type: 'plain' },
    { text: '{\n  ', type: 'plain' },
    { text: 'try', type: 'keyword' },
    { text: ' ', type: 'plain' },
    { text: '{\n    ', type: 'plain' },
    { text: 'const', type: 'keyword' },
    { text: ' ', type: 'plain' },
    { text: 'response', type: 'variable' },
    { text: ' = ', type: 'operator' },
    { text: 'await', type: 'keyword' },
    { text: ' ', type: 'plain' },
    { text: 'fetch', type: 'function' },
    { text: '(', type: 'operator' },
    { text: '`/api/users/${', type: 'string' },
    { text: 'id', type: 'variable' },
    { text: '}`', type: 'string' },
    { text: ')', type: 'operator' },
    { text: ';\n    ', type: 'plain' },
    { text: 'return', type: 'keyword' },
    { text: ' ', type: 'plain' },
    { text: 'response', type: 'variable' },
    { text: '.', type: 'operator' },
    { text: 'json', type: 'function' },
    { text: '(', type: 'operator' },
    { text: ')', type: 'operator' },
    { text: ';\n  ', type: 'plain' },
    { text: '} ', type: 'plain' },
    { text: 'catch', type: 'keyword' },
    { text: ' ', type: 'plain' },
    { text: '(', type: 'operator' },
    { text: 'error', type: 'variable' },
    { text: ')', type: 'operator' },
    { text: ' ', type: 'plain' },
    { text: '{\n    ', type: 'plain' },
    { text: 'console', type: 'variable' },
    { text: '.', type: 'operator' },
    { text: 'error', type: 'function' },
    { text: '(', type: 'operator' },
    { text: 'error', type: 'variable' },
    { text: ')', type: 'operator' },
    { text: ';\n  ', type: 'plain' },
    { text: '}\n}', type: 'plain' },
  ]
};

// Export all JavaScript examples
export const javascriptExamples: CodeExample[] = [
  basicFunction,
  variablesExample,
  conditionalExample,
  forLoopExample,
  arrayMethodsExample,
  templateLiteralExample,
  classExample,
  arrayExample,
  destructuringExample,
  promiseExample,
  higherOrderExample,
  generatorExample,
  asyncExample,
]; 