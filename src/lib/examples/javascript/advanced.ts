import { CodeExample, Difficulty, ProgrammingLanguage } from '@/types/typing';

export const advancedJavaScriptExamples: CodeExample[] = [
  {
    id: 'js-prototype-inheritance',
    title: '프로토타입 상속',
    language: 'javascript' as ProgrammingLanguage,
    difficulty: 'advanced' as Difficulty,
    description: '프로토타입 체인과 상속 메커니즘의 동작 원리를 이해합니다.',
    tags: ['prototype', 'inheritance', '__proto__', 'constructor'],
    estimatedTime: 90,
    code: [
      { text: 'function', type: 'keyword' },
      { text: ' ', type: 'plain' },
      { text: 'Animal', type: 'function' },
      { text: '(', type: 'operator' },
      { text: 'name', type: 'variable' },
      { text: ') {\n  ', type: 'plain' },
      { text: 'this', type: 'keyword' },
      { text: '.', type: 'operator' },
      { text: 'name', type: 'property' },
      { text: ' = ', type: 'operator' },
      { text: 'name', type: 'variable' },
      { text: ';\n}\n\n', type: 'plain' },
      { text: 'Animal', type: 'variable' },
      { text: '.', type: 'operator' },
      { text: 'prototype', type: 'property' },
      { text: '.', type: 'operator' },
      { text: 'speak', type: 'function' },
      { text: ' = ', type: 'operator' },
      { text: 'function', type: 'keyword' },
      { text: '() {\n  ', type: 'plain' },
      { text: 'console', type: 'variable' },
      { text: '.', type: 'operator' },
      { text: 'log', type: 'function' },
      { text: '(', type: 'operator' },
      { text: 'this', type: 'keyword' },
      { text: '.', type: 'operator' },
      { text: 'name', type: 'property' },
      { text: ' + ', type: 'operator' },
      { text: '" makes a sound"', type: 'string' },
      { text: ')', type: 'operator' },
      { text: ';\n};\n\n', type: 'plain' },
      { text: 'function', type: 'keyword' },
      { text: ' ', type: 'plain' },
      { text: 'Dog', type: 'function' },
      { text: '(', type: 'operator' },
      { text: 'name', type: 'variable' },
      { text: ') {\n  ', type: 'plain' },
      { text: 'Animal', type: 'function' },
      { text: '.', type: 'operator' },
      { text: 'call', type: 'function' },
      { text: '(', type: 'operator' },
      { text: 'this', type: 'keyword' },
      { text: ', ', type: 'plain' },
      { text: 'name', type: 'variable' },
      { text: ')', type: 'operator' },
      { text: ';\n}\n\n', type: 'plain' },
      { text: 'Dog', type: 'variable' },
      { text: '.', type: 'operator' },
      { text: 'prototype', type: 'property' },
      { text: ' = ', type: 'operator' },
      { text: 'Object', type: 'variable' },
      { text: '.', type: 'operator' },
      { text: 'create', type: 'function' },
      { text: '(', type: 'operator' },
      { text: 'Animal', type: 'variable' },
      { text: '.', type: 'operator' },
      { text: 'prototype', type: 'property' },
      { text: ')', type: 'operator' },
      { text: ';\n', type: 'plain' },
      { text: 'Dog', type: 'variable' },
      { text: '.', type: 'operator' },
      { text: 'prototype', type: 'property' },
      { text: '.', type: 'operator' },
      { text: 'constructor', type: 'property' },
      { text: ' = ', type: 'operator' },
      { text: 'Dog', type: 'variable' },
      { text: ';', type: 'plain' },
    ]
  },
  {
    id: 'js-generator-async',
    title: '제너레이터와 비동기 이터레이션',
    language: 'javascript' as ProgrammingLanguage,
    difficulty: 'advanced' as Difficulty,
    description: '제너레이터를 사용한 비동기 이터레이션 패턴을 구현합니다.',
    tags: ['generator', 'async-iteration', 'symbol.asyncIterator'],
    estimatedTime: 75,
    code: [
      { text: 'class', type: 'keyword' },
      { text: ' ', type: 'plain' },
      { text: 'AsyncNumberStream', type: 'type' },
      { text: ' {\n  ', type: 'plain' },
      { text: 'constructor', type: 'function' },
      { text: '(', type: 'operator' },
      { text: 'start', type: 'variable' },
      { text: ', ', type: 'plain' },
      { text: 'end', type: 'variable' },
      { text: ') {\n    ', type: 'plain' },
      { text: 'this', type: 'keyword' },
      { text: '.', type: 'operator' },
      { text: 'start', type: 'property' },
      { text: ' = ', type: 'operator' },
      { text: 'start', type: 'variable' },
      { text: ';\n    ', type: 'plain' },
      { text: 'this', type: 'keyword' },
      { text: '.', type: 'operator' },
      { text: 'end', type: 'property' },
      { text: ' = ', type: 'operator' },
      { text: 'end', type: 'variable' },
      { text: ';\n  }\n\n  ', type: 'plain' },
      { text: '[Symbol', type: 'variable' },
      { text: '.', type: 'operator' },
      { text: 'asyncIterator', type: 'property' },
      { text: ']() {\n    ', type: 'plain' },
      { text: 'let', type: 'keyword' },
      { text: ' ', type: 'plain' },
      { text: 'current', type: 'variable' },
      { text: ' = ', type: 'operator' },
      { text: 'this', type: 'keyword' },
      { text: '.', type: 'operator' },
      { text: 'start', type: 'property' },
      { text: ';\n    ', type: 'plain' },
      { text: 'const', type: 'keyword' },
      { text: ' ', type: 'plain' },
      { text: 'end', type: 'variable' },
      { text: ' = ', type: 'operator' },
      { text: 'this', type: 'keyword' },
      { text: '.', type: 'operator' },
      { text: 'end', type: 'property' },
      { text: ';\n\n    ', type: 'plain' },
      { text: 'return', type: 'keyword' },
      { text: ' {\n      ', type: 'plain' },
      { text: 'async', type: 'keyword' },
      { text: ' ', type: 'plain' },
      { text: 'next', type: 'function' },
      { text: '() {\n        ', type: 'plain' },
      { text: 'await', type: 'keyword' },
      { text: ' ', type: 'plain' },
      { text: 'new', type: 'keyword' },
      { text: ' ', type: 'plain' },
      { text: 'Promise', type: 'type' },
      { text: '(', type: 'operator' },
      { text: 'resolve', type: 'variable' },
      { text: ' => ', type: 'operator' },
      { text: 'setTimeout', type: 'function' },
      { text: '(', type: 'operator' },
      { text: 'resolve', type: 'variable' },
      { text: ', ', type: 'plain' },
      { text: '1000', type: 'number' },
      { text: '))', type: 'operator' },
      { text: ';\n\n        ', type: 'plain' },
      { text: 'if', type: 'keyword' },
      { text: ' (', type: 'operator' },
      { text: 'current', type: 'variable' },
      { text: ' <= ', type: 'operator' },
      { text: 'end', type: 'variable' },
      { text: ') {\n          ', type: 'plain' },
      { text: 'return', type: 'keyword' },
      { text: ' { ', type: 'plain' },
      { text: 'value', type: 'property' },
      { text: ': ', type: 'operator' },
      { text: 'current', type: 'variable' },
      { text: '++, ', type: 'operator' },
      { text: 'done', type: 'property' },
      { text: ': ', type: 'operator' },
      { text: 'false', type: 'keyword' },
      { text: ' };\n        } ', type: 'plain' },
      { text: 'else', type: 'keyword' },
      { text: ' {\n          ', type: 'plain' },
      { text: 'return', type: 'keyword' },
      { text: ' { ', type: 'plain' },
      { text: 'done', type: 'property' },
      { text: ': ', type: 'operator' },
      { text: 'true', type: 'keyword' },
      { text: ' };\n        }\n      }\n    };\n  }', type: 'plain' },
      { text: '\n}', type: 'plain' },
    ]
  },
  {
    id: 'js-proxy-reflect',
    title: 'Proxy와 Reflect',
    language: 'javascript' as ProgrammingLanguage,
    difficulty: 'advanced' as Difficulty,
    description: 'Proxy를 사용한 객체 가로채기와 Reflect를 통한 메타프로그래밍을 학습합니다.',
    tags: ['proxy', 'reflect', 'metaprogramming'],
    estimatedTime: 80,
    code: [
      { text: 'const', type: 'keyword' },
      { text: ' ', type: 'plain' },
      { text: 'handler', type: 'variable' },
      { text: ' = {\n  ', type: 'plain' },
      { text: 'get', type: 'function' },
      { text: '(', type: 'operator' },
      { text: 'target', type: 'variable' },
      { text: ', ', type: 'plain' },
      { text: 'prop', type: 'variable' },
      { text: ', ', type: 'plain' },
      { text: 'receiver', type: 'variable' },
      { text: ') {\n    ', type: 'plain' },
      { text: 'console', type: 'variable' },
      { text: '.', type: 'operator' },
      { text: 'log', type: 'function' },
      { text: '(', type: 'operator' },
      { text: '`Accessing ${', type: 'string' },
      { text: 'prop', type: 'variable' },
      { text: '}`', type: 'string' },
      { text: ')', type: 'operator' },
      { text: ';\n    ', type: 'plain' },
      { text: 'return', type: 'keyword' },
      { text: ' ', type: 'plain' },
      { text: 'Reflect', type: 'variable' },
      { text: '.', type: 'operator' },
      { text: 'get', type: 'function' },
      { text: '(', type: 'operator' },
      { text: 'target', type: 'variable' },
      { text: ', ', type: 'plain' },
      { text: 'prop', type: 'variable' },
      { text: ', ', type: 'plain' },
      { text: 'receiver', type: 'variable' },
      { text: ')', type: 'operator' },
      { text: ';\n  },\n\n  ', type: 'plain' },
      { text: 'set', type: 'function' },
      { text: '(', type: 'operator' },
      { text: 'target', type: 'variable' },
      { text: ', ', type: 'plain' },
      { text: 'prop', type: 'variable' },
      { text: ', ', type: 'plain' },
      { text: 'value', type: 'variable' },
      { text: ', ', type: 'plain' },
      { text: 'receiver', type: 'variable' },
      { text: ') {\n    ', type: 'plain' },
      { text: 'console', type: 'variable' },
      { text: '.', type: 'operator' },
      { text: 'log', type: 'function' },
      { text: '(', type: 'operator' },
      { text: '`Setting ${', type: 'string' },
      { text: 'prop', type: 'variable' },
      { text: '} = ${', type: 'string' },
      { text: 'value', type: 'variable' },
      { text: '}`', type: 'string' },
      { text: ')', type: 'operator' },
      { text: ';\n    ', type: 'plain' },
      { text: 'return', type: 'keyword' },
      { text: ' ', type: 'plain' },
      { text: 'Reflect', type: 'variable' },
      { text: '.', type: 'operator' },
      { text: 'set', type: 'function' },
      { text: '(', type: 'operator' },
      { text: 'target', type: 'variable' },
      { text: ', ', type: 'plain' },
      { text: 'prop', type: 'variable' },
      { text: ', ', type: 'plain' },
      { text: 'value', type: 'variable' },
      { text: ', ', type: 'plain' },
      { text: 'receiver', type: 'variable' },
      { text: ')', type: 'operator' },
      { text: ';\n  }\n};\n\n', type: 'plain' },
      { text: 'const', type: 'keyword' },
      { text: ' ', type: 'plain' },
      { text: 'target', type: 'variable' },
      { text: ' = {\n  ', type: 'plain' },
      { text: 'name', type: 'property' },
      { text: ': ', type: 'operator' },
      { text: '"John"', type: 'string' },
      { text: '\n};\n\n', type: 'plain' },
      { text: 'const', type: 'keyword' },
      { text: ' ', type: 'plain' },
      { text: 'proxy', type: 'variable' },
      { text: ' = ', type: 'operator' },
      { text: 'new', type: 'keyword' },
      { text: ' ', type: 'plain' },
      { text: 'Proxy', type: 'type' },
      { text: '(', type: 'operator' },
      { text: 'target', type: 'variable' },
      { text: ', ', type: 'plain' },
      { text: 'handler', type: 'variable' },
      { text: ')', type: 'operator' },
      { text: ';', type: 'plain' },
    ]
  }
]; 