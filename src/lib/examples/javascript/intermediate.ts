import { CodeExample, Difficulty, ProgrammingLanguage } from '@/types/typing';

export const intermediateJavaScriptExamples: CodeExample[] = [
  {
    id: 'js-class-definition',
    title: '클래스 정의',
    language: 'javascript' as ProgrammingLanguage,
    difficulty: 'intermediate' as Difficulty,
    description: '클래스 선언과 메서드 구현을 연습합니다.',
    tags: ['class', 'constructor', 'method'],
    estimatedTime: 60,
    code: [
      { text: 'class', type: 'keyword' },
      { text: ' ', type: 'plain' },
      { text: 'User', type: 'type' },
      { text: ' ', type: 'plain' },
      { text: '{\n  ', type: 'plain' },
      { text: 'private', type: 'keyword' },
      { text: ' ', type: 'plain' },
      { text: 'name', type: 'property' },
      { text: ':', type: 'operator' },
      { text: ' string', type: 'type' },
      { text: ';\n\n  ', type: 'plain' },
      { text: 'constructor', type: 'function' },
      { text: '(', type: 'operator' },
      { text: 'name', type: 'variable' },
      { text: ':', type: 'operator' },
      { text: ' string', type: 'type' },
      { text: ') ', type: 'operator' },
      { text: '{\n    ', type: 'plain' },
      { text: 'this', type: 'keyword' },
      { text: '.', type: 'operator' },
      { text: 'name', type: 'property' },
      { text: ' = ', type: 'operator' },
      { text: 'name', type: 'variable' },
      { text: ';\n  ', type: 'plain' },
      { text: '}\n\n  ', type: 'plain' },
      { text: 'getName', type: 'function' },
      { text: '(', type: 'operator' },
      { text: ')', type: 'operator' },
      { text: ' ', type: 'plain' },
      { text: '{\n    ', type: 'plain' },
      { text: 'return', type: 'keyword' },
      { text: ' ', type: 'plain' },
      { text: 'this', type: 'keyword' },
      { text: '.', type: 'operator' },
      { text: 'name', type: 'property' },
      { text: ';\n  ', type: 'plain' },
      { text: '}\n}', type: 'plain' },
    ]
  },
  {
    id: 'js-destructuring',
    title: '구조 분해와 전개',
    language: 'javascript' as ProgrammingLanguage,
    difficulty: 'intermediate' as Difficulty,
    description: '객체/배열 구조 분해 할당과 전개 연산자 사용을 연습합니다.',
    tags: ['destructuring', 'spread', 'object', 'array'],
    estimatedTime: 45,
    code: [
      { text: 'const', type: 'keyword' },
      { text: ' ', type: 'plain' },
      { text: 'user', type: 'variable' },
      { text: ' = {\n  ', type: 'plain' },
      { text: 'name', type: 'property' },
      { text: ': ', type: 'operator' },
      { text: '"John"', type: 'string' },
      { text: ',\n  ', type: 'plain' },
      { text: 'age', type: 'property' },
      { text: ': ', type: 'operator' },
      { text: '30', type: 'number' },
      { text: ',\n  ', type: 'plain' },
      { text: 'skills', type: 'property' },
      { text: ': [', type: 'operator' },
      { text: '"JS"', type: 'string' },
      { text: ', ', type: 'plain' },
      { text: '"TS"', type: 'string' },
      { text: ']\n};\n\n', type: 'plain' },
      { text: 'const', type: 'keyword' },
      { text: ' { ', type: 'plain' },
      { text: 'name', type: 'variable' },
      { text: ', ', type: 'plain' },
      { text: 'skills', type: 'variable' },
      { text: ': [', type: 'operator' },
      { text: 'firstSkill', type: 'variable' },
      { text: '] } = ', type: 'operator' },
      { text: 'user', type: 'variable' },
      { text: ';\n\n', type: 'plain' },
      { text: 'const', type: 'keyword' },
      { text: ' ', type: 'plain' },
      { text: 'newUser', type: 'variable' },
      { text: ' = { ...', type: 'operator' },
      { text: 'user', type: 'variable' },
      { text: ', ', type: 'plain' },
      { text: 'role', type: 'property' },
      { text: ': ', type: 'operator' },
      { text: '"admin"', type: 'string' },
      { text: ' };', type: 'plain' },
    ]
  },
  {
    id: 'js-promise-chain',
    title: 'Promise 체이닝',
    language: 'javascript' as ProgrammingLanguage,
    difficulty: 'intermediate' as Difficulty,
    description: 'Promise 체이닝을 통한 비동기 작업 처리를 연습합니다.',
    tags: ['promise', 'then', 'catch', 'async'],
    estimatedTime: 50,
    code: [
      { text: 'fetch', type: 'function' },
      { text: '(', type: 'operator' },
      { text: '"/api/user/1"', type: 'string' },
      { text: ')\n  .', type: 'plain' },
      { text: 'then', type: 'function' },
      { text: '(', type: 'operator' },
      { text: 'response', type: 'variable' },
      { text: ' => ', type: 'operator' },
      { text: 'response', type: 'variable' },
      { text: '.', type: 'operator' },
      { text: 'json', type: 'function' },
      { text: '()', type: 'operator' },
      { text: ')\n  .', type: 'plain' },
      { text: 'then', type: 'function' },
      { text: '(', type: 'operator' },
      { text: 'user', type: 'variable' },
      { text: ' => {\n    ', type: 'plain' },
      { text: 'return', type: 'keyword' },
      { text: ' ', type: 'plain' },
      { text: 'fetch', type: 'function' },
      { text: '(', type: 'operator' },
      { text: '`/api/posts/${', type: 'string' },
      { text: 'user', type: 'variable' },
      { text: '.', type: 'operator' },
      { text: 'id', type: 'property' },
      { text: '}`', type: 'string' },
      { text: ');\n  })', type: 'plain' },
      { text: '\n  .', type: 'plain' },
      { text: 'then', type: 'function' },
      { text: '(', type: 'operator' },
      { text: 'posts', type: 'variable' },
      { text: ' => ', type: 'operator' },
      { text: 'console', type: 'variable' },
      { text: '.', type: 'operator' },
      { text: 'log', type: 'function' },
      { text: '(', type: 'operator' },
      { text: 'posts', type: 'variable' },
      { text: '))', type: 'operator' },
      { text: '\n  .', type: 'plain' },
      { text: 'catch', type: 'function' },
      { text: '(', type: 'operator' },
      { text: 'error', type: 'variable' },
      { text: ' => ', type: 'operator' },
      { text: 'console', type: 'variable' },
      { text: '.', type: 'operator' },
      { text: 'error', type: 'function' },
      { text: '(', type: 'operator' },
      { text: 'error', type: 'variable' },
      { text: '));', type: 'operator' },
    ]
  },
  {
    id: 'js-async-await',
    title: 'Async/Await',
    language: 'javascript' as ProgrammingLanguage,
    difficulty: 'intermediate' as Difficulty,
    description: 'async/await를 사용한 API 데이터 가져오기를 연습합니다.',
    tags: ['async', 'await', 'fetch', 'error-handling'],
    estimatedTime: 60,
    code: [
      { text: 'async', type: 'keyword' },
      { text: ' ', type: 'plain' },
      { text: 'function', type: 'keyword' },
      { text: ' ', type: 'plain' },
      { text: 'fetchUserData', type: 'function' },
      { text: '(', type: 'operator' },
      { text: 'userId', type: 'variable' },
      { text: ')', type: 'operator' },
      { text: ' ', type: 'plain' },
      { text: '{\n  ', type: 'plain' },
      { text: 'try', type: 'keyword' },
      { text: ' {\n    ', type: 'plain' },
      { text: 'const', type: 'keyword' },
      { text: ' ', type: 'plain' },
      { text: 'response', type: 'variable' },
      { text: ' = ', type: 'operator' },
      { text: 'await', type: 'keyword' },
      { text: ' ', type: 'plain' },
      { text: 'fetch', type: 'function' },
      { text: '(', type: 'operator' },
      { text: '`https://api.example.com/users/${', type: 'string' },
      { text: 'userId', type: 'variable' },
      { text: '}`', type: 'string' },
      { text: ')', type: 'operator' },
      { text: ';\n    ', type: 'plain' },
      { text: 'const', type: 'keyword' },
      { text: ' ', type: 'plain' },
      { text: 'data', type: 'variable' },
      { text: ' = ', type: 'operator' },
      { text: 'await', type: 'keyword' },
      { text: ' ', type: 'plain' },
      { text: 'response', type: 'variable' },
      { text: '.', type: 'operator' },
      { text: 'json', type: 'function' },
      { text: '()', type: 'operator' },
      { text: ';\n    ', type: 'plain' },
      { text: 'return', type: 'keyword' },
      { text: ' ', type: 'plain' },
      { text: 'data', type: 'variable' },
      { text: ';\n  ', type: 'plain' },
      { text: '} ', type: 'plain' },
      { text: 'catch', type: 'keyword' },
      { text: ' (', type: 'operator' },
      { text: 'error', type: 'variable' },
      { text: ') {\n    ', type: 'operator' },
      { text: 'console', type: 'variable' },
      { text: '.', type: 'operator' },
      { text: 'error', type: 'function' },
      { text: '(', type: 'operator' },
      { text: '"Error fetching user:"', type: 'string' },
      { text: ', ', type: 'plain' },
      { text: 'error', type: 'variable' },
      { text: ')', type: 'operator' },
      { text: ';\n  }\n}', type: 'plain' },
    ]
  },
  {
    id: 'js-debounce',
    title: '디바운스 함수',
    language: 'javascript' as ProgrammingLanguage,
    difficulty: 'intermediate' as Difficulty,
    description: '연속적인 이벤트 호출을 제어하는 디바운스 함수를 구현합니다.',
    tags: ['debounce', 'event-handling', 'closure'],
    estimatedTime: 45,
    code: [
      { text: 'function', type: 'keyword' },
      { text: ' ', type: 'plain' },
      { text: 'debounce', type: 'function' },
      { text: '(', type: 'operator' },
      { text: 'func', type: 'variable' },
      { text: ', ', type: 'plain' },
      { text: 'delay', type: 'variable' },
      { text: ') {\n  ', type: 'plain' },
      { text: 'let', type: 'keyword' },
      { text: ' ', type: 'plain' },
      { text: 'timeoutId', type: 'variable' },
      { text: ';\n\n  ', type: 'plain' },
      { text: 'return', type: 'keyword' },
      { text: ' ', type: 'plain' },
      { text: 'function', type: 'keyword' },
      { text: ' (', type: 'operator' },
      { text: '...args', type: 'variable' },
      { text: ') {\n    ', type: 'operator' },
      { text: 'clearTimeout', type: 'function' },
      { text: '(', type: 'operator' },
      { text: 'timeoutId', type: 'variable' },
      { text: ')', type: 'operator' },
      { text: ';\n\n    ', type: 'plain' },
      { text: 'timeoutId', type: 'variable' },
      { text: ' = ', type: 'operator' },
      { text: 'setTimeout', type: 'function' },
      { text: '(', type: 'operator' },
      { text: '() => {\n      ', type: 'plain' },
      { text: 'func', type: 'variable' },
      { text: '.', type: 'operator' },
      { text: 'apply', type: 'function' },
      { text: '(', type: 'operator' },
      { text: 'this', type: 'keyword' },
      { text: ', ', type: 'plain' },
      { text: 'args', type: 'variable' },
      { text: ')', type: 'operator' },
      { text: ';\n    }, ', type: 'plain' },
      { text: 'delay', type: 'variable' },
      { text: ')', type: 'operator' },
      { text: ';\n  };\n}', type: 'plain' },
    ]
  },
  {
    id: 'js-event-handling',
    title: '이벤트 핸들링',
    language: 'javascript' as ProgrammingLanguage,
    difficulty: 'intermediate' as Difficulty,
    description: '이벤트 위임을 사용한 동적 요소 처리를 연습합니다.',
    tags: ['event-delegation', 'DOM', 'bubbling'],
    estimatedTime: 50,
    code: [
      { text: 'document', type: 'variable' },
      { text: '.', type: 'operator' },
      { text: 'querySelector', type: 'function' },
      { text: '(', type: 'operator' },
      { text: '".todo-list"', type: 'string' },
      { text: ')', type: 'operator' },
      { text: '.', type: 'operator' },
      { text: 'addEventListener', type: 'function' },
      { text: '(', type: 'operator' },
      { text: '"click"', type: 'string' },
      { text: ', ', type: 'plain' },
      { text: 'function', type: 'keyword' },
      { text: ' (', type: 'operator' },
      { text: 'event', type: 'variable' },
      { text: ') {\n  ', type: 'operator' },
      { text: 'if', type: 'keyword' },
      { text: ' (', type: 'operator' },
      { text: 'event', type: 'variable' },
      { text: '.', type: 'operator' },
      { text: 'target', type: 'property' },
      { text: '.', type: 'operator' },
      { text: 'matches', type: 'function' },
      { text: '(', type: 'operator' },
      { text: '".delete-btn"', type: 'string' },
      { text: ')) {\n    ', type: 'operator' },
      { text: 'const', type: 'keyword' },
      { text: ' ', type: 'plain' },
      { text: 'todoItem', type: 'variable' },
      { text: ' = ', type: 'operator' },
      { text: 'event', type: 'variable' },
      { text: '.', type: 'operator' },
      { text: 'target', type: 'property' },
      { text: '.', type: 'operator' },
      { text: 'closest', type: 'function' },
      { text: '(', type: 'operator' },
      { text: '".todo-item"', type: 'string' },
      { text: ')', type: 'operator' },
      { text: ';\n    ', type: 'plain' },
      { text: 'todoItem', type: 'variable' },
      { text: '?.', type: 'operator' },
      { text: 'remove', type: 'function' },
      { text: '()', type: 'operator' },
      { text: ';\n  }\n});', type: 'plain' },
    ]
  }
]; 